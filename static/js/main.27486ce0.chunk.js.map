{"version":3,"sources":["assets/hearts.png","assets/diamonds_new.png","assets/spades_new.png","assets/clubs_new.png","Header.js","utils/index.js","Card.js","CardStack.js","StackSection.js","CardsSection.js","GameSection.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","setState","createInitialState","className","id","onClick","randomGenerator","min","max","Math","floor","random","suits","typeInfo","hearts","color","image","diamonds","spades","clubs","Card","type","cardDetails","stacked","displayNumber","number","getDisplayNumber","draggable","onDragStart","e","dataTransfer","setData","JSON","stringify","dropEffect","style","top","left","zIndex","src","alt","CardStack","suitStackedCards","state","map","suitStackedCard","key","onDrop","parse","getData","newState","cardsLayout","filter","card","stackedCards","push","onDragOver","preventDefault","StackSection","suit","CardsSection","GameSection","Footer","Date","getFullYear","forEach","i","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.27486ce0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hearts.236e820d.png\";","module.exports = __webpack_public_path__ + \"static/media/diamonds_new.fa8245a9.png\";","module.exports = __webpack_public_path__ + \"static/media/spades_new.c2c39f02.png\";","module.exports = __webpack_public_path__ + \"static/media/clubs_new.912255c9.png\";","import React from 'react';\nimport './header.scss';\n\nconst Header = ({ setState, createInitialState }) => {\n    return(\n        <header className=\"header\">\n            <div className=\"title\">Deck of Cards</div>\n            <button className=\"primaryBtn\" id=\"newGameBtn\" onClick={() => setState(createInitialState())}>New Game</button>\n        </header>\n    );\n};\n\nexport default Header;","import hearts from '../assets/hearts.png';\nimport diamonds from '../assets/diamonds_new.png';\nimport spades from '../assets/spades_new.png';\nimport clubs from '../assets/clubs_new.png';\n\nexport const randomGenerator = (min, max) => {\n    return Math.floor(Math.random() * max) + min;\n};\n\nexport const suits = ['hearts', 'diamonds', 'spades', 'clubs'];\n\nexport const typeInfo = {\n    hearts: {\n        color: 'red',\n        image: hearts\n    },\n    diamonds: {\n        color: 'red',\n        image: diamonds\n    },\n    spades: {\n        color: 'black',\n        image: spades\n    },\n    clubs: {\n        color: 'black',\n        image: clubs\n    }\n};","import React from 'react';\nimport './card.scss';\nimport { typeInfo } from './utils';\n\nconst getDisplayNumber = number => {\n    switch(number){\n        case 1:\n            return 'A';\n        case 11:\n            return 'J';\n        case 12:\n            return 'Q';\n        case 13:\n            return 'K';\n        default:\n            return number;\n    };\n};\n\nconst Card = ({ type, cardDetails, stacked = false }) => {\n    const onDragStart = e => {\n        e.dataTransfer.setData('cardDetails', JSON.stringify({[type]: {...cardDetails}}));\n        e.dataTransfer.dropEffect = \"move\";\n    };\n\n    let displayNumber = getDisplayNumber(cardDetails.number);\n\n    return(\n        <div className={stacked ? \"card stackedCard\" : \"card\"} id={type+cardDetails.number} draggable onDragStart={e => onDragStart(e)} style={{ color: typeInfo[type].color, top: `${cardDetails.top}%`, left: `${cardDetails.left}%`, zIndex: cardDetails.zIndex }}>\n            <div className=\"topNumber\">{displayNumber}</div>\n            <div className=\"cardImage\">\n                <img src={typeInfo[type].image} alt=\"Suit Icon\" draggable=\"false\" />\n            </div>\n            <div className=\"bottomNumber\">{displayNumber}</div>\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport './cardstack.scss';\nimport { typeInfo } from './utils';\n\nconst onDragOver = e => {\n    e.preventDefault();\n};\n\nconst onDrop = (e, type, state, setState) => {\n    const cardDetails = JSON.parse(e.dataTransfer.getData('cardDetails')) || {};\n    if(cardDetails[type]){\n        const newState = {...state};\n        newState.cardsLayout[type] = state.cardsLayout[type].filter(card => {\n            return card.number !== cardDetails[type].number;\n        });\n        newState.stackedCards[type].push(cardDetails[type]);\n        setState(newState);\n        // const card = document.getElementById(cardId);\n        // card.style.top = '-1px';\n        // card.style.left = '-1px';\n        // card.style.zIndex = 0;\n        // e.currentTarget.parentElement.querySelector('.cardContainer').appendChild(card);\n    }\n};\n\nconst CardStack = ({ type, suitStackedCards, state, setState }) => {\n    return(\n        <div className=\"cardStack\">\n            <div className=\"default\">\n                <img src={typeInfo[type].image} alt=\"Suit Icon\" draggable=\"false\" className=\"suitRefImage\" />\n                {type}\n            </div>\n            <div className=\"cardContainer\">\n                {suitStackedCards.map(suitStackedCard => <Card type={type} cardDetails={suitStackedCard} stacked={true} key={type+suitStackedCard.number}></Card>)}\n            </div>\n            <div className=\"dropContainer\" onDrop={e => onDrop(e, type, state, setState)} onDragOver={e => onDragOver(e)}></div>\n        </div>\n    );\n};\n\nexport default CardStack;","import React from 'react';\nimport CardStack from './CardStack';\nimport './stack-section.scss';\nimport { suits } from './utils/index.js';\n\nconst StackSection = ({ stackedCards, state, setState }) => {\n    return(\n        <div className=\"stackSection\">\n            {\n                suits.map(suit => <CardStack type={suit} suitStackedCards={stackedCards[suit]} state={state} setState={setState} key={suit}></CardStack>)\n            }\n        </div>\n    );\n};\n\nexport default StackSection;","import React from 'react';\nimport Card from './Card';\nimport { suits } from './utils';\nimport './cards-section.scss';\n\nconst CardsSection = ({ cardsLayout }) => {\n    return(\n        <div className=\"cardsSection\">\n            {\n                suits.map(suit => {\n                    return cardsLayout[suit].map(cardDetails => <Card type={suit} cardDetails={cardDetails} key={suit+cardDetails.number}></Card>);\n                })\n            }\n        </div>\n    );\n};\n\nexport default CardsSection;","import React from 'react';\nimport StackSection from './StackSection';\nimport CardsSection from './CardsSection';\nimport './game-section.scss';\n\nconst GameSection = ({ state, setState }) => {\n    return(\n        <div className=\"gameSection\">\n            <StackSection stackedCards={state.stackedCards} state={state} setState={setState}></StackSection>\n            <CardsSection cardsLayout={state.cardsLayout}></CardsSection>\n        </div>\n    );\n};\n\nexport default GameSection;","import React from 'react';\nimport './footer.scss';\n\nconst Footer = () => {\n    return(\n        <footer className=\"footer\">\n            Copyright &copy; {new Date().getFullYear()}. All rights reserved\n        </footer>\n    );\n};\n\nexport default Footer;","import React, { useState } from 'react';\nimport Header from './Header';\nimport GameSection from './GameSection';\nimport Footer from './Footer';\nimport './app.scss';\nimport { suits, randomGenerator } from './utils';\n\nconst createInitialState = () => {\n\tconst cardsLayout = {};\n\tsuits.forEach(suit => {\n\t\tcardsLayout[suit] = [];\n\t\tfor(let i=1;i<=13;i++){\n\t\t\tcardsLayout[suit].push({number: i, top: randomGenerator(0, 60), left: randomGenerator(3, 85), zIndex: randomGenerator(0, 10)});\n\t\t}\n\t});\n\n\tconst stackedCards = {};\n\tsuits.forEach(suit => stackedCards[suit] = []);\n\treturn { cardsLayout: cardsLayout, stackedCards: stackedCards };\n}\n\nfunction App() {\n\tconst [state, setState] = useState(createInitialState());\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Header setState={setState} createInitialState={createInitialState}></Header>\n\t\t\t<GameSection state={state} setState={setState}></GameSection>\n\t\t\t<Footer></Footer>\n\t\t</div>\n\t);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}